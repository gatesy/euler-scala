package team16.euler

/**
 * Highly divisible triangular number
 * Problem 12
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th 
 * triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 *  10: 1,2,5,10
 *  15: 1,3,5,15
 *  21: 1,3,7,21
 *  28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 */

object Problem012 extends App {

  val triangular: Stream[Long] = {
    def loop(nextNumber: Long, count: Long) : Stream[Long] = nextNumber #:: loop(nextNumber + count, count + 1)
    loop(1, 2)
  }
  
  // Speed this up by having a lookup table. It's far too slow without it
  def countDivisors(number: Long): Int = {
    val start: Long = number + 1L / 2L
    val divisors: Int = ((start to 1L by -1L) filter { number % _ == 0}).length
    if(divisors > 100) println(number + ": " + divisors)
    divisors
  } 
  
  def numberWith(divisors: Int) = (triangular takeWhile { x => countDivisors(x) <= divisors } takeRight 1).head
  println(numberWith(501))
}