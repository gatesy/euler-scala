package team16.euler

/**
 * Highly divisible triangular number
 * Problem 12
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th 
 * triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 *  10: 1,2,5,10
 *  15: 1,3,5,15
 *  21: 1,3,7,21
 *  28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 */

import scala.collection._

object Problem012 extends App {

  // Infinite stream of triangular numbers
  val triangular: Stream[Long] = {
    def loop(nextNumber: Long, count: Long) : Stream[Long] = nextNumber #:: loop(nextNumber + count, count + 1)
    loop(1, 2)
  }
  
  // Use a lookup table to save recalculating sub-factors we've factorised before.
  def primeFactors(lookupTable: mutable.Map[Long, List[Long]], number: Long): List[Long] = {
    def getPrimeFactors(number: Long): List[Long] = {
      lookupTable.getOrElseUpdate(number, { 
        val firstFactor = (2L to number) find { number % _ == 0 }
        if(firstFactor == None) List[Long]()
        else firstFactor.get :: getPrimeFactors(number / firstFactor.get)
      })
    }
    getPrimeFactors(number)
  }
  
  def countDivisors(primeFactors: List[Long]) = {
    def buildAccumulator(remainder: List[Long]): Map[Long, Int] = remainder match {
      case Nil => Map[Long, Int]()
      case x :: xs => {
        val rest = buildAccumulator(xs)
        val count = (rest getOrElse(x, 0)) + 1
        rest + (x -> count)
      }
    }
    buildAccumulator(primeFactors).values.foldLeft(1) { (total, x) => total * (x+1) }
  }
  
  def numberWithOver(divisors: Int) : Long = {
    var lookupTable = mutable.Map[Long, List[Long]]();
    triangular find { x => countDivisors(primeFactors(lookupTable, x)) > divisors } get
  }
  
  println("First triangular number with over 5 divisors -> " + numberWithOver(5))
  println("First triangular number with over 500 divisors -> " + numberWithOver(500))
  
}